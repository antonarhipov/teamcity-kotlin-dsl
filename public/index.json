[
{
	"uri": "/posts/project/",
	"title": "Project Settings",
	"tags": [],
	"description": "",
	"content": "The top-level project element in settings.kts file represents a top level context for all the build configurations and subprojects that are declared within the scope.\nproject { }  The top level does not need to have an id and a name.\nA project in TeamCity may include sub-projects and build configurations. A sub-project should be registered in the main context by using subProject function:\nproject { //as a block subProject { } //as an object subProject(MyProject) }  "
},
{
	"uri": "/docs/01_getting_started/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/posts/build/",
	"title": "Build Configuration",
	"tags": [],
	"description": "",
	"content": "To register a new build configuration one should use the buildType function by providing either a block or a type name as a parameter\nproject { buildType { } buildType(Build) }  A build configuration in Kotlin DSL is a BuildType instance:\nproject { buildType(Build) } object Build : BuildType { id(\u0026quot;Build\u0026quot;) name = \u0026quot;Build\u0026quot; steps { script { scriptContent = \u0026quot;echo 'Hello'\u0026quot; } } }  "
},
{
	"uri": "/docs/02_advanced_topics/",
	"title": "Advanced Topics",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/posts/project/02_vcs_root/",
	"title": "VCS Roots",
	"tags": [],
	"description": "",
	"content": " Working with VCS roots clear\n"
},
{
	"uri": "/docs/03_faq/",
	"title": "FAQ and Common Problems",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/posts/project/03_parameters/",
	"title": "Parameters",
	"tags": [],
	"description": "",
	"content": " Working with VCS roots "
},
{
	"uri": "/posts/project/05_artifact_storage/",
	"title": "Artifact storage",
	"tags": [],
	"description": "",
	"content": " Clean-up Rules "
},
{
	"uri": "/posts/project/04_cleanup/",
	"title": "Clean-up Rules",
	"tags": [],
	"description": "",
	"content": " Clean-up Rules "
},
{
	"uri": "/posts/build/08_agent_requirements/",
	"title": "Agent Requirements",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/posts/build/05_build_features/",
	"title": "Build features",
	"tags": [],
	"description": "",
	"content": " Declaring build features block features { }  Docker support dockerSupport { cleanupPushedImages = true loginToRegistry = on { dockerRegistryId = \u0026quot;PROJECT_EXT_19\u0026quot; } }  Merge branches merge { branchFilter = \u0026quot;+:feature*\u0026quot; }  Files cleanup using Swabra plugin swabra { filesCleanup = Swabra.FilesCleanup.AFTER_BUILD forceCleanCheckout = true lockingProcesses = Swabra.LockingProcessPolicy.REPORT verbose = true }  Replacing content within files replaceContent { fileRules = \u0026quot;+:version.txt\u0026quot; pattern = \u0026quot;placeholder\u0026quot; replacement = \u0026quot;%build.number%\u0026quot; }  Generic build feature declaration feature { type = \u0026quot;perfmon\u0026quot; }  "
},
{
	"uri": "/posts/build/01_vcs_settings/",
	"title": "Build steps",
	"tags": [],
	"description": "",
	"content": " Build steps block steps { }  Invoke Ant build using file ant { mode = antFile {} targets = \u0026quot;build\u0026quot; jvmArgs = \u0026quot;-Xmx512m\u0026quot; dockerImage = \u0026quot;someImage\u0026quot; param(\u0026quot;teamcity.tests.runRiskGroupTestsFirst\u0026quot;, \u0026quot;newAndModified,recentlyFailed\u0026quot;) }  Invoke Ant build using file in Docker container ant { mode = antFile {} targets = \u0026quot;build\u0026quot; jvmArgs = \u0026quot;-Xmx512m\u0026quot; dockerImage = \u0026quot;someImageName:someVersion\u0026quot; }  Invoke Gradle build gradle { name = \u0026quot;Gradle Step\u0026quot; tasks = \u0026quot;clean build\u0026quot; }  Maven build maven { goals = \u0026quot;clean package install\u0026quot; mavenVersion = defaultProvidedVersion() jvmArgs = \u0026quot;-Xmx512m\u0026quot; }  CLI script { scriptContent = \u0026quot;echo %build.number%\u0026quot; }  Docker Command dockerCommand { commandType = build { source = path { path = \u0026quot;Dockerfile\u0026quot; } namesAndTags = \u0026quot;antonarhipov/blah:%build.number%\u0026quot; commandArgs = \u0026quot;--pull\u0026quot; } }  Generic step step { name = \u0026quot;FtpUpload\u0026quot; type = \u0026quot;ftp-deploy-runner\u0026quot; param(\u0026quot;jetbrains.buildServer.deployer.ftp.authMethod\u0026quot;, \u0026quot;ANONYMOUS\u0026quot;) param(\u0026quot;jetbrains.buildServer.deployer.ftp.transferMethod\u0026quot;, \u0026quot;AUTO\u0026quot;) param(\u0026quot;jetbrains.buildServer.deployer.sourcePath\u0026quot;, \u0026quot;dir/**/*.zip\u0026quot;) param(\u0026quot;jetbrains.buildServer.deployer.targetUrl\u0026quot;, \u0026quot;ftp.target.net\u0026quot;) param(\u0026quot;jetbrains.buildServer.deployer.ftp.securityMode\u0026quot;, \u0026quot;0\u0026quot;) }  Helm install helmInstall { chart = \u0026quot;.\u0026quot; param(\u0026quot;teamcity.helm.command\u0026quot;, \u0026quot;helm-install\u0026quot;) }  "
},
{
	"uri": "/posts/build/02_build_steps/",
	"title": "Build steps",
	"tags": [],
	"description": "",
	"content": " Build steps block steps { }  Invoke Ant build using file ant { mode = antFile {} targets = \u0026quot;build\u0026quot; jvmArgs = \u0026quot;-Xmx512m\u0026quot; dockerImage = \u0026quot;someImage\u0026quot; param(\u0026quot;teamcity.tests.runRiskGroupTestsFirst\u0026quot;, \u0026quot;newAndModified,recentlyFailed\u0026quot;) }  Invoke Ant build using file in Docker container ant { mode = antFile {} targets = \u0026quot;build\u0026quot; jvmArgs = \u0026quot;-Xmx512m\u0026quot; dockerImage = \u0026quot;someImageName:someVersion\u0026quot; }  Invoke Gradle build gradle { name = \u0026quot;Gradle Step\u0026quot; tasks = \u0026quot;clean build\u0026quot; }  Maven build maven { goals = \u0026quot;clean package install\u0026quot; mavenVersion = defaultProvidedVersion() jvmArgs = \u0026quot;-Xmx512m\u0026quot; }  CLI script { scriptContent = \u0026quot;echo %build.number%\u0026quot; }  Docker Command dockerCommand { commandType = build { source = path { path = \u0026quot;Dockerfile\u0026quot; } namesAndTags = \u0026quot;antonarhipov/blah:%build.number%\u0026quot; commandArgs = \u0026quot;--pull\u0026quot; } }  Generic step step { name = \u0026quot;FtpUpload\u0026quot; type = \u0026quot;ftp-deploy-runner\u0026quot; param(\u0026quot;jetbrains.buildServer.deployer.ftp.authMethod\u0026quot;, \u0026quot;ANONYMOUS\u0026quot;) param(\u0026quot;jetbrains.buildServer.deployer.ftp.transferMethod\u0026quot;, \u0026quot;AUTO\u0026quot;) param(\u0026quot;jetbrains.buildServer.deployer.sourcePath\u0026quot;, \u0026quot;dir/**/*.zip\u0026quot;) param(\u0026quot;jetbrains.buildServer.deployer.targetUrl\u0026quot;, \u0026quot;ftp.target.net\u0026quot;) param(\u0026quot;jetbrains.buildServer.deployer.ftp.securityMode\u0026quot;, \u0026quot;0\u0026quot;) }  Helm install helmInstall { chart = \u0026quot;.\u0026quot; param(\u0026quot;teamcity.helm.command\u0026quot;, \u0026quot;helm-install\u0026quot;) }  "
},
{
	"uri": "/posts/build/06_dependencies/",
	"title": "Dependencies",
	"tags": [],
	"description": "",
	"content": " Dependencies block dependencies { }  Snapshot dependencies dependency(Build){ snapshot {} }  snapshot(Build){ }  Artifact dependencies dependency(Build){ artifact { artifactRules = \u0026quot;*.jar\u0026quot; } }  artifact(Build) { artifactRules = \u0026quot;*.jar\u0026quot; }  Declaring snapshot and artifact dependencies dependency(Build){ snapshot { } artifact { artifactRules = \u0026quot;*.jar\u0026quot; } }  "
},
{
	"uri": "/posts/build/04_failure_conditions/",
	"title": "Failure conditions",
	"tags": [],
	"description": "",
	"content": " Declaring failure conditions failureConditions { }  Fail if the build log contains a string failOnText { conditionType = BuildFailureOnText.ConditionType.CONTAINS pattern = \u0026quot;error in build\u0026quot; failureMessage = \u0026quot;Build failed\u0026quot; reverse = false stopBuildOnFailure = true }  Fail on artifact size change failOnMetricChange { metric = BuildFailureOnMetric.MetricType.ARTIFACT_SIZE threshold = 100 units = BuildFailureOnMetric.MetricUnit.DEFAULT_UNIT comparison = BuildFailureOnMetric.MetricComparison.LESS compareTo = value() param(\u0026quot;anchorBuild\u0026quot;, \u0026quot;lastSuccessful\u0026quot;) }  Fail on build duration change failOnMetricChange { metric = BuildFailureOnMetric.MetricType.BUILD_DURATION threshold = 200 units = BuildFailureOnMetric.MetricUnit.PERCENTS comparison = BuildFailureOnMetric.MetricComparison.MORE compareTo = build { buildRule = lastSuccessful() } }  Fail on test duration change failOnMetricChange { metric = BuildFailureOnMetric.MetricType.TEST_DURATION threshold = 200 units = BuildFailureOnMetric.MetricUnit.PERCENTS comparison = BuildFailureOnMetric.MetricComparison.MORE compareTo = build { buildRule = lastSuccessful() } stopBuildOnFailure = true }  "
},
{
	"uri": "/posts/build/07_parameters/",
	"title": "Parameters",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/posts/build/03_triggers/",
	"title": "Triggers",
	"tags": [],
	"description": "",
	"content": " Declaring the triggers block triggers { }  VCS trigger vcs { }  Scheduled build trigger schedule { branchFilter = \u0026quot;\u0026quot; triggerBuild = onWatchedBuildChange { buildType = \u0026quot;${Build.id}\u0026quot; watchedBuildRule = ScheduleTrigger.WatchedBuildRule.LAST_FINISHED } withPendingChangesOnly = false param(\u0026quot;dayOfWeek\u0026quot;, \u0026quot;Sunday\u0026quot;) }  Finished build trigger finishBuildTrigger { buildTypeExtId = \u0026quot;App10_BuildApp\u0026quot; successfulOnly = true }  Remote run on branch trigger { type = \u0026quot;remoteRunOnBranch\u0026quot; param(\u0026quot;branchy:jetbrains.git\u0026quot;, \u0026quot;pattern:jetbrains.git\u0026quot;) }  Retry build trigger retryBuild { delaySeconds = 10 }  "
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/docs/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/posts/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/",
	"title": "TeamCity Kotlin DSL Home",
	"tags": [],
	"description": "",
	"content": "Welcome to the Home of Kotlin DSL for TeamCity. You will learn a lot of interesting things here :)\n"
}]