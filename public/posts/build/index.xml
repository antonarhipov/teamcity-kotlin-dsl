<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Build Configuration on Kotlin DSL for TeamCity</title>
    <link>/posts/build/</link>
    <description>Recent content in Build Configuration on Kotlin DSL for TeamCity</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Jul 2018 10:21:28 +0300</lastBuildDate>
    
	<atom:link href="/posts/build/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Agent Requirements</title>
      <link>/posts/build/08_agent_requirements/</link>
      <pubDate>Tue, 17 Jul 2018 10:21:28 +0300</pubDate>
      
      <guid>/posts/build/08_agent_requirements/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Build features</title>
      <link>/posts/build/05_build_features/</link>
      <pubDate>Tue, 17 Jul 2018 10:21:28 +0300</pubDate>
      
      <guid>/posts/build/05_build_features/</guid>
      <description>Declaring build features block features { }  Docker support dockerSupport { cleanupPushedImages = true loginToRegistry = on { dockerRegistryId = &amp;quot;PROJECT_EXT_19&amp;quot; } }  Merge branches merge { branchFilter = &amp;quot;+:feature*&amp;quot; }  Files cleanup using Swabra plugin swabra { filesCleanup = Swabra.FilesCleanup.AFTER_BUILD forceCleanCheckout = true lockingProcesses = Swabra.LockingProcessPolicy.REPORT verbose = true }  Replacing content within files replaceContent { fileRules = &amp;quot;+:version.txt&amp;quot; pattern = &amp;quot;placeholder&amp;quot; replacement = &amp;quot;%build.</description>
    </item>
    
    <item>
      <title>Build steps</title>
      <link>/posts/build/01_vcs_settings/</link>
      <pubDate>Tue, 17 Jul 2018 10:21:28 +0300</pubDate>
      
      <guid>/posts/build/01_vcs_settings/</guid>
      <description>Build steps block steps { }  Invoke Ant build using file ant { mode = antFile {} targets = &amp;quot;build&amp;quot; jvmArgs = &amp;quot;-Xmx512m&amp;quot; dockerImage = &amp;quot;someImage&amp;quot; param(&amp;quot;teamcity.tests.runRiskGroupTestsFirst&amp;quot;, &amp;quot;newAndModified,recentlyFailed&amp;quot;) }  Invoke Ant build using file in Docker container ant { mode = antFile {} targets = &amp;quot;build&amp;quot; jvmArgs = &amp;quot;-Xmx512m&amp;quot; dockerImage = &amp;quot;someImageName:someVersion&amp;quot; }  Invoke Gradle build gradle { name = &amp;quot;Gradle Step&amp;quot; tasks = &amp;quot;clean build&amp;quot; }  Maven build maven { goals = &amp;quot;clean package install&amp;quot; mavenVersion = defaultProvidedVersion() jvmArgs = &amp;quot;-Xmx512m&amp;quot; }  CLI script { scriptContent = &amp;quot;echo %build.</description>
    </item>
    
    <item>
      <title>Build steps</title>
      <link>/posts/build/02_build_steps/</link>
      <pubDate>Tue, 17 Jul 2018 10:21:28 +0300</pubDate>
      
      <guid>/posts/build/02_build_steps/</guid>
      <description>Build steps block steps { }  Invoke Ant build using file ant { mode = antFile {} targets = &amp;quot;build&amp;quot; jvmArgs = &amp;quot;-Xmx512m&amp;quot; dockerImage = &amp;quot;someImage&amp;quot; param(&amp;quot;teamcity.tests.runRiskGroupTestsFirst&amp;quot;, &amp;quot;newAndModified,recentlyFailed&amp;quot;) }  Invoke Ant build using file in Docker container ant { mode = antFile {} targets = &amp;quot;build&amp;quot; jvmArgs = &amp;quot;-Xmx512m&amp;quot; dockerImage = &amp;quot;someImageName:someVersion&amp;quot; }  Invoke Gradle build gradle { name = &amp;quot;Gradle Step&amp;quot; tasks = &amp;quot;clean build&amp;quot; }  Maven build maven { goals = &amp;quot;clean package install&amp;quot; mavenVersion = defaultProvidedVersion() jvmArgs = &amp;quot;-Xmx512m&amp;quot; }  CLI script { scriptContent = &amp;quot;echo %build.</description>
    </item>
    
    <item>
      <title>Dependencies</title>
      <link>/posts/build/06_dependencies/</link>
      <pubDate>Tue, 17 Jul 2018 10:21:28 +0300</pubDate>
      
      <guid>/posts/build/06_dependencies/</guid>
      <description> Dependencies block dependencies { }  Snapshot dependencies dependency(Build){ snapshot {} }  snapshot(Build){ }  Artifact dependencies dependency(Build){ artifact { artifactRules = &amp;quot;*.jar&amp;quot; } }  artifact(Build) { artifactRules = &amp;quot;*.jar&amp;quot; }  Declaring snapshot and artifact dependencies dependency(Build){ snapshot { } artifact { artifactRules = &amp;quot;*.jar&amp;quot; } }  </description>
    </item>
    
    <item>
      <title>Failure conditions</title>
      <link>/posts/build/04_failure_conditions/</link>
      <pubDate>Tue, 17 Jul 2018 10:21:28 +0300</pubDate>
      
      <guid>/posts/build/04_failure_conditions/</guid>
      <description>Declaring failure conditions failureConditions { }  Fail if the build log contains a string failOnText { conditionType = BuildFailureOnText.ConditionType.CONTAINS pattern = &amp;quot;error in build&amp;quot; failureMessage = &amp;quot;Build failed&amp;quot; reverse = false stopBuildOnFailure = true }  Fail on artifact size change failOnMetricChange { metric = BuildFailureOnMetric.MetricType.ARTIFACT_SIZE threshold = 100 units = BuildFailureOnMetric.MetricUnit.DEFAULT_UNIT comparison = BuildFailureOnMetric.MetricComparison.LESS compareTo = value() param(&amp;quot;anchorBuild&amp;quot;, &amp;quot;lastSuccessful&amp;quot;) }  Fail on build duration change failOnMetricChange { metric = BuildFailureOnMetric.</description>
    </item>
    
    <item>
      <title>Parameters</title>
      <link>/posts/build/07_parameters/</link>
      <pubDate>Tue, 17 Jul 2018 10:21:28 +0300</pubDate>
      
      <guid>/posts/build/07_parameters/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Triggers</title>
      <link>/posts/build/03_triggers/</link>
      <pubDate>Tue, 17 Jul 2018 10:21:28 +0300</pubDate>
      
      <guid>/posts/build/03_triggers/</guid>
      <description> Declaring the triggers block triggers { }  VCS trigger vcs { }  Scheduled build trigger schedule { branchFilter = &amp;quot;&amp;quot; triggerBuild = onWatchedBuildChange { buildType = &amp;quot;${Build.id}&amp;quot; watchedBuildRule = ScheduleTrigger.WatchedBuildRule.LAST_FINISHED } withPendingChangesOnly = false param(&amp;quot;dayOfWeek&amp;quot;, &amp;quot;Sunday&amp;quot;) }  Finished build trigger finishBuildTrigger { buildTypeExtId = &amp;quot;App10_BuildApp&amp;quot; successfulOnly = true }  Remote run on branch trigger { type = &amp;quot;remoteRunOnBranch&amp;quot; param(&amp;quot;branchy:jetbrains.git&amp;quot;, &amp;quot;pattern:jetbrains.git&amp;quot;) }  Retry build trigger retryBuild { delaySeconds = 10 }  </description>
    </item>
    
  </channel>
</rss>